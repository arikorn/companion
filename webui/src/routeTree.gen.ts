/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { createFileRoute } from '@tanstack/react-router'

// Import Routes

import { Route as rootRoute } from './routes/__root.tsx'
import { Route as RedirectsTablet3Import } from './routes/-redirects/tablet3.tsx'
import { Route as RedirectsTablet2HtmlImport } from './routes/-redirects/tablet2-html.tsx'
import { Route as RedirectsTabletHtmlImport } from './routes/-redirects/tablet-html.tsx'
import { Route as RedirectsIpadHtmlImport } from './routes/-redirects/ipad-html.tsx'
import { Route as RedirectsHelpHtmlImport } from './routes/-redirects/help-html.tsx'
import { Route as RedirectsEmulatorsImport } from './routes/-redirects/emulators.tsx'
import { Route as RedirectsEmulator2Import } from './routes/-redirects/emulator2.tsx'
import { Route as RedirectsEmulatorHtmlImport } from './routes/-redirects/emulator-html.tsx'
import { Route as EmulatorImport } from './routes/self-contained/emulator.tsx'
import { Route as appImport } from './routes/_app.tsx'
import { Route as EmulatorIndexImport } from './routes/self-contained/emulator/index.tsx'
import { Route as IndexImport } from './routes/app/index.tsx'
import { Route as ConnectionDebugconnectionIdImport } from './routes/self-contained/connection-debug.$connectionId.tsx'
import { Route as TriggersImport } from './routes/app/triggers.tsx'
import { Route as ModulesImport } from './routes/app/modules.tsx'
import { Route as LogImport } from './routes/app/log.tsx'
import { Route as ImportExportImport } from './routes/app/import-export.tsx'
import { Route as ConnectionsImport } from './routes/app/connections.tsx'
import { Route as CloudImport } from './routes/app/cloud.tsx'
import { Route as ButtonsImport } from './routes/app/buttons.tsx'
import { Route as SplatImport } from './routes/app/$.tsx'
import { Route as VariablesIndexImport } from './routes/app/variables/index.tsx'
import { Route as TriggersIndexImport } from './routes/app/triggers/index.tsx'
import { Route as SettingsIndexImport } from './routes/app/settings/index.tsx'
import { Route as ModulesIndexImport } from './routes/app/modules/index.tsx'
import { Route as VariablesCustomImport } from './routes/app/variables/custom.tsx'
import { Route as VariablesLabelImport } from './routes/app/variables/$label.tsx'
import { Route as TriggersControlIdImport } from './routes/app/triggers/$controlId.tsx'
import { Route as SurfacesOutboundImport } from './routes/app/surfaces/outbound.tsx'
import { Route as SurfacesDiscoverImport } from './routes/app/surfaces/discover.tsx'
import { Route as SurfacesConfiguredImport } from './routes/app/surfaces/configured.tsx'
import { Route as SurfacesSplatImport } from './routes/app/surfaces/$.tsx'
import { Route as SettingsSurfacesImport } from './routes/app/settings/surfaces.tsx'
import { Route as SettingsProtocolsImport } from './routes/app/settings/protocols.tsx'
import { Route as SettingsGeneralImport } from './routes/app/settings/general.tsx'
import { Route as SettingsButtonsImport } from './routes/app/settings/buttons.tsx'
import { Route as SettingsAdvancedImport } from './routes/app/settings/advanced.tsx'
import { Route as ModulesModuleIdImport } from './routes/app/modules/$moduleId.tsx'
import { Route as ButtonsPageImport } from './routes/app/buttons/$page.tsx'

// Create Virtual Routes

const TabletlazyImport = createFileRoute('/tablet')()
const GettingStartedlazyImport = createFileRoute('/getting-started')()
const EmulatorEmulatorIdlazyImport = createFileRoute('/emulator/$emulatorId')()

// Create/Update Routes

const TabletlazyRoute = TabletlazyImport.update({
  id: '/tablet',
  path: '/tablet',
  getParentRoute: () => rootRoute,
} as any).lazy(() =>
  import('./routes/self-contained/tablet.lazy.tsx').then((d) => d.Route),
)

const GettingStartedlazyRoute = GettingStartedlazyImport.update({
  id: '/getting-started',
  path: '/getting-started',
  getParentRoute: () => rootRoute,
} as any).lazy(() =>
  import('./routes/self-contained/getting-started.lazy.tsx').then(
    (d) => d.Route,
  ),
)

const RedirectsTablet3Route = RedirectsTablet3Import.update({
  id: '/tablet3',
  path: '/tablet3',
  getParentRoute: () => rootRoute,
} as any)

const RedirectsTablet2HtmlRoute = RedirectsTablet2HtmlImport.update({
  id: '/tablet2.html',
  path: '/tablet2.html',
  getParentRoute: () => rootRoute,
} as any)

const RedirectsTabletHtmlRoute = RedirectsTabletHtmlImport.update({
  id: '/tablet.html',
  path: '/tablet.html',
  getParentRoute: () => rootRoute,
} as any)

const RedirectsIpadHtmlRoute = RedirectsIpadHtmlImport.update({
  id: '/ipad.html',
  path: '/ipad.html',
  getParentRoute: () => rootRoute,
} as any)

const RedirectsHelpHtmlRoute = RedirectsHelpHtmlImport.update({
  id: '/help.html',
  path: '/help.html',
  getParentRoute: () => rootRoute,
} as any)

const RedirectsEmulatorsRoute = RedirectsEmulatorsImport.update({
  id: '/emulators',
  path: '/emulators',
  getParentRoute: () => rootRoute,
} as any)

const RedirectsEmulator2Route = RedirectsEmulator2Import.update({
  id: '/emulator2',
  path: '/emulator2',
  getParentRoute: () => rootRoute,
} as any)

const RedirectsEmulatorHtmlRoute = RedirectsEmulatorHtmlImport.update({
  id: '/emulator.html',
  path: '/emulator.html',
  getParentRoute: () => rootRoute,
} as any)

const EmulatorRoute = EmulatorImport.update({
  id: '/emulator',
  path: '/emulator',
  getParentRoute: () => rootRoute,
} as any)

const appRoute = appImport.update({
  id: '/_app',
  getParentRoute: () => rootRoute,
} as any)

const EmulatorIndexRoute = EmulatorIndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => EmulatorRoute,
} as any)

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => appRoute,
} as any)

const EmulatorEmulatorIdlazyRoute = EmulatorEmulatorIdlazyImport.update({
  id: '/$emulatorId',
  path: '/$emulatorId',
  getParentRoute: () => EmulatorRoute,
} as any).lazy(() =>
  import('./routes/self-contained/emulator/$emulatorId.lazy.tsx').then(
    (d) => d.Route,
  ),
)

const ConnectionDebugconnectionIdRoute =
  ConnectionDebugconnectionIdImport.update({
    id: '/connection-debug/$connectionId',
    path: '/connection-debug/$connectionId',
    getParentRoute: () => rootRoute,
  } as any)

const TriggersRoute = TriggersImport.update({
  id: '/triggers',
  path: '/triggers',
  getParentRoute: () => appRoute,
} as any)

const ModulesRoute = ModulesImport.update({
  id: '/modules',
  path: '/modules',
  getParentRoute: () => appRoute,
} as any)

const LogRoute = LogImport.update({
  id: '/log',
  path: '/log',
  getParentRoute: () => appRoute,
} as any)

const ImportExportRoute = ImportExportImport.update({
  id: '/import-export',
  path: '/import-export',
  getParentRoute: () => appRoute,
} as any)

const ConnectionsRoute = ConnectionsImport.update({
  id: '/connections',
  path: '/connections',
  getParentRoute: () => appRoute,
} as any)

const CloudRoute = CloudImport.update({
  id: '/cloud',
  path: '/cloud',
  getParentRoute: () => appRoute,
} as any)

const ButtonsRoute = ButtonsImport.update({
  id: '/buttons',
  path: '/buttons',
  getParentRoute: () => appRoute,
} as any)

const SplatRoute = SplatImport.update({
  id: '/$',
  path: '/$',
  getParentRoute: () => appRoute,
} as any)

const VariablesIndexRoute = VariablesIndexImport.update({
  id: '/variables/',
  path: '/variables/',
  getParentRoute: () => appRoute,
} as any)

const TriggersIndexRoute = TriggersIndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => TriggersRoute,
} as any)

const SettingsIndexRoute = SettingsIndexImport.update({
  id: '/settings/',
  path: '/settings/',
  getParentRoute: () => appRoute,
} as any)

const ModulesIndexRoute = ModulesIndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => ModulesRoute,
} as any)

const VariablesCustomRoute = VariablesCustomImport.update({
  id: '/variables/custom',
  path: '/variables/custom',
  getParentRoute: () => appRoute,
} as any)

const VariablesLabelRoute = VariablesLabelImport.update({
  id: '/variables/$label',
  path: '/variables/$label',
  getParentRoute: () => appRoute,
} as any)

const TriggersControlIdRoute = TriggersControlIdImport.update({
  id: '/$controlId',
  path: '/$controlId',
  getParentRoute: () => TriggersRoute,
} as any)

const SurfacesOutboundRoute = SurfacesOutboundImport.update({
  id: '/surfaces/outbound',
  path: '/surfaces/outbound',
  getParentRoute: () => appRoute,
} as any)

const SurfacesDiscoverRoute = SurfacesDiscoverImport.update({
  id: '/surfaces/discover',
  path: '/surfaces/discover',
  getParentRoute: () => appRoute,
} as any)

const SurfacesConfiguredRoute = SurfacesConfiguredImport.update({
  id: '/surfaces/configured',
  path: '/surfaces/configured',
  getParentRoute: () => appRoute,
} as any)

const SurfacesSplatRoute = SurfacesSplatImport.update({
  id: '/surfaces/$',
  path: '/surfaces/$',
  getParentRoute: () => appRoute,
} as any)

const SettingsSurfacesRoute = SettingsSurfacesImport.update({
  id: '/settings/surfaces',
  path: '/settings/surfaces',
  getParentRoute: () => appRoute,
} as any)

const SettingsProtocolsRoute = SettingsProtocolsImport.update({
  id: '/settings/protocols',
  path: '/settings/protocols',
  getParentRoute: () => appRoute,
} as any)

const SettingsGeneralRoute = SettingsGeneralImport.update({
  id: '/settings/general',
  path: '/settings/general',
  getParentRoute: () => appRoute,
} as any)

const SettingsButtonsRoute = SettingsButtonsImport.update({
  id: '/settings/buttons',
  path: '/settings/buttons',
  getParentRoute: () => appRoute,
} as any)

const SettingsAdvancedRoute = SettingsAdvancedImport.update({
  id: '/settings/advanced',
  path: '/settings/advanced',
  getParentRoute: () => appRoute,
} as any)

const ModulesModuleIdRoute = ModulesModuleIdImport.update({
  id: '/$moduleId',
  path: '/$moduleId',
  getParentRoute: () => ModulesRoute,
} as any)

const ButtonsPageRoute = ButtonsPageImport.update({
  id: '/$page',
  path: '/$page',
  getParentRoute: () => ButtonsRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/_app': {
      id: '/_app'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof appImport
      parentRoute: typeof rootRoute
    }
    '/emulator': {
      id: '/emulator'
      path: '/emulator'
      fullPath: '/emulator'
      preLoaderRoute: typeof EmulatorImport
      parentRoute: typeof rootRoute
    }
    '/emulator.html': {
      id: '/emulator.html'
      path: '/emulator.html'
      fullPath: '/emulator.html'
      preLoaderRoute: typeof RedirectsEmulatorHtmlImport
      parentRoute: typeof rootRoute
    }
    '/emulator2': {
      id: '/emulator2'
      path: '/emulator2'
      fullPath: '/emulator2'
      preLoaderRoute: typeof RedirectsEmulator2Import
      parentRoute: typeof rootRoute
    }
    '/emulators': {
      id: '/emulators'
      path: '/emulators'
      fullPath: '/emulators'
      preLoaderRoute: typeof RedirectsEmulatorsImport
      parentRoute: typeof rootRoute
    }
    '/help.html': {
      id: '/help.html'
      path: '/help.html'
      fullPath: '/help.html'
      preLoaderRoute: typeof RedirectsHelpHtmlImport
      parentRoute: typeof rootRoute
    }
    '/ipad.html': {
      id: '/ipad.html'
      path: '/ipad.html'
      fullPath: '/ipad.html'
      preLoaderRoute: typeof RedirectsIpadHtmlImport
      parentRoute: typeof rootRoute
    }
    '/tablet.html': {
      id: '/tablet.html'
      path: '/tablet.html'
      fullPath: '/tablet.html'
      preLoaderRoute: typeof RedirectsTabletHtmlImport
      parentRoute: typeof rootRoute
    }
    '/tablet2.html': {
      id: '/tablet2.html'
      path: '/tablet2.html'
      fullPath: '/tablet2.html'
      preLoaderRoute: typeof RedirectsTablet2HtmlImport
      parentRoute: typeof rootRoute
    }
    '/tablet3': {
      id: '/tablet3'
      path: '/tablet3'
      fullPath: '/tablet3'
      preLoaderRoute: typeof RedirectsTablet3Import
      parentRoute: typeof rootRoute
    }
    '/getting-started': {
      id: '/getting-started'
      path: '/getting-started'
      fullPath: '/getting-started'
      preLoaderRoute: typeof GettingStartedlazyImport
      parentRoute: typeof rootRoute
    }
    '/tablet': {
      id: '/tablet'
      path: '/tablet'
      fullPath: '/tablet'
      preLoaderRoute: typeof TabletlazyImport
      parentRoute: typeof rootRoute
    }
    '/_app/$': {
      id: '/_app/$'
      path: '/$'
      fullPath: '/$'
      preLoaderRoute: typeof SplatImport
      parentRoute: typeof appImport
    }
    '/_app/buttons': {
      id: '/_app/buttons'
      path: '/buttons'
      fullPath: '/buttons'
      preLoaderRoute: typeof ButtonsImport
      parentRoute: typeof appImport
    }
    '/_app/cloud': {
      id: '/_app/cloud'
      path: '/cloud'
      fullPath: '/cloud'
      preLoaderRoute: typeof CloudImport
      parentRoute: typeof appImport
    }
    '/_app/connections': {
      id: '/_app/connections'
      path: '/connections'
      fullPath: '/connections'
      preLoaderRoute: typeof ConnectionsImport
      parentRoute: typeof appImport
    }
    '/_app/import-export': {
      id: '/_app/import-export'
      path: '/import-export'
      fullPath: '/import-export'
      preLoaderRoute: typeof ImportExportImport
      parentRoute: typeof appImport
    }
    '/_app/log': {
      id: '/_app/log'
      path: '/log'
      fullPath: '/log'
      preLoaderRoute: typeof LogImport
      parentRoute: typeof appImport
    }
    '/_app/modules': {
      id: '/_app/modules'
      path: '/modules'
      fullPath: '/modules'
      preLoaderRoute: typeof ModulesImport
      parentRoute: typeof appImport
    }
    '/_app/triggers': {
      id: '/_app/triggers'
      path: '/triggers'
      fullPath: '/triggers'
      preLoaderRoute: typeof TriggersImport
      parentRoute: typeof appImport
    }
    '/connection-debug/$connectionId': {
      id: '/connection-debug/$connectionId'
      path: '/connection-debug/$connectionId'
      fullPath: '/connection-debug/$connectionId'
      preLoaderRoute: typeof ConnectionDebugconnectionIdImport
      parentRoute: typeof rootRoute
    }
    '/emulator/$emulatorId': {
      id: '/emulator/$emulatorId'
      path: '/$emulatorId'
      fullPath: '/emulator/$emulatorId'
      preLoaderRoute: typeof EmulatorEmulatorIdlazyImport
      parentRoute: typeof EmulatorImport
    }
    '/_app/': {
      id: '/_app/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof appImport
    }
    '/emulator/': {
      id: '/emulator/'
      path: '/'
      fullPath: '/emulator/'
      preLoaderRoute: typeof EmulatorIndexImport
      parentRoute: typeof EmulatorImport
    }
    '/_app/buttons/$page': {
      id: '/_app/buttons/$page'
      path: '/$page'
      fullPath: '/buttons/$page'
      preLoaderRoute: typeof ButtonsPageImport
      parentRoute: typeof ButtonsImport
    }
    '/_app/modules/$moduleId': {
      id: '/_app/modules/$moduleId'
      path: '/$moduleId'
      fullPath: '/modules/$moduleId'
      preLoaderRoute: typeof ModulesModuleIdImport
      parentRoute: typeof ModulesImport
    }
    '/_app/settings/advanced': {
      id: '/_app/settings/advanced'
      path: '/settings/advanced'
      fullPath: '/settings/advanced'
      preLoaderRoute: typeof SettingsAdvancedImport
      parentRoute: typeof appImport
    }
    '/_app/settings/buttons': {
      id: '/_app/settings/buttons'
      path: '/settings/buttons'
      fullPath: '/settings/buttons'
      preLoaderRoute: typeof SettingsButtonsImport
      parentRoute: typeof appImport
    }
    '/_app/settings/general': {
      id: '/_app/settings/general'
      path: '/settings/general'
      fullPath: '/settings/general'
      preLoaderRoute: typeof SettingsGeneralImport
      parentRoute: typeof appImport
    }
    '/_app/settings/protocols': {
      id: '/_app/settings/protocols'
      path: '/settings/protocols'
      fullPath: '/settings/protocols'
      preLoaderRoute: typeof SettingsProtocolsImport
      parentRoute: typeof appImport
    }
    '/_app/settings/surfaces': {
      id: '/_app/settings/surfaces'
      path: '/settings/surfaces'
      fullPath: '/settings/surfaces'
      preLoaderRoute: typeof SettingsSurfacesImport
      parentRoute: typeof appImport
    }
    '/_app/surfaces/$': {
      id: '/_app/surfaces/$'
      path: '/surfaces/$'
      fullPath: '/surfaces/$'
      preLoaderRoute: typeof SurfacesSplatImport
      parentRoute: typeof appImport
    }
    '/_app/surfaces/configured': {
      id: '/_app/surfaces/configured'
      path: '/surfaces/configured'
      fullPath: '/surfaces/configured'
      preLoaderRoute: typeof SurfacesConfiguredImport
      parentRoute: typeof appImport
    }
    '/_app/surfaces/discover': {
      id: '/_app/surfaces/discover'
      path: '/surfaces/discover'
      fullPath: '/surfaces/discover'
      preLoaderRoute: typeof SurfacesDiscoverImport
      parentRoute: typeof appImport
    }
    '/_app/surfaces/outbound': {
      id: '/_app/surfaces/outbound'
      path: '/surfaces/outbound'
      fullPath: '/surfaces/outbound'
      preLoaderRoute: typeof SurfacesOutboundImport
      parentRoute: typeof appImport
    }
    '/_app/triggers/$controlId': {
      id: '/_app/triggers/$controlId'
      path: '/$controlId'
      fullPath: '/triggers/$controlId'
      preLoaderRoute: typeof TriggersControlIdImport
      parentRoute: typeof TriggersImport
    }
    '/_app/variables/$label': {
      id: '/_app/variables/$label'
      path: '/variables/$label'
      fullPath: '/variables/$label'
      preLoaderRoute: typeof VariablesLabelImport
      parentRoute: typeof appImport
    }
    '/_app/variables/custom': {
      id: '/_app/variables/custom'
      path: '/variables/custom'
      fullPath: '/variables/custom'
      preLoaderRoute: typeof VariablesCustomImport
      parentRoute: typeof appImport
    }
    '/_app/modules/': {
      id: '/_app/modules/'
      path: '/'
      fullPath: '/modules/'
      preLoaderRoute: typeof ModulesIndexImport
      parentRoute: typeof ModulesImport
    }
    '/_app/settings/': {
      id: '/_app/settings/'
      path: '/settings'
      fullPath: '/settings'
      preLoaderRoute: typeof SettingsIndexImport
      parentRoute: typeof appImport
    }
    '/_app/triggers/': {
      id: '/_app/triggers/'
      path: '/'
      fullPath: '/triggers/'
      preLoaderRoute: typeof TriggersIndexImport
      parentRoute: typeof TriggersImport
    }
    '/_app/variables/': {
      id: '/_app/variables/'
      path: '/variables'
      fullPath: '/variables'
      preLoaderRoute: typeof VariablesIndexImport
      parentRoute: typeof appImport
    }
  }
}

// Create and export the route tree

interface ButtonsRouteChildren {
  ButtonsPageRoute: typeof ButtonsPageRoute
}

const ButtonsRouteChildren: ButtonsRouteChildren = {
  ButtonsPageRoute: ButtonsPageRoute,
}

const ButtonsRouteWithChildren =
  ButtonsRoute._addFileChildren(ButtonsRouteChildren)

interface ModulesRouteChildren {
  ModulesModuleIdRoute: typeof ModulesModuleIdRoute
  ModulesIndexRoute: typeof ModulesIndexRoute
}

const ModulesRouteChildren: ModulesRouteChildren = {
  ModulesModuleIdRoute: ModulesModuleIdRoute,
  ModulesIndexRoute: ModulesIndexRoute,
}

const ModulesRouteWithChildren =
  ModulesRoute._addFileChildren(ModulesRouteChildren)

interface TriggersRouteChildren {
  TriggersControlIdRoute: typeof TriggersControlIdRoute
  TriggersIndexRoute: typeof TriggersIndexRoute
}

const TriggersRouteChildren: TriggersRouteChildren = {
  TriggersControlIdRoute: TriggersControlIdRoute,
  TriggersIndexRoute: TriggersIndexRoute,
}

const TriggersRouteWithChildren = TriggersRoute._addFileChildren(
  TriggersRouteChildren,
)

interface appRouteChildren {
  SplatRoute: typeof SplatRoute
  ButtonsRoute: typeof ButtonsRouteWithChildren
  CloudRoute: typeof CloudRoute
  ConnectionsRoute: typeof ConnectionsRoute
  ImportExportRoute: typeof ImportExportRoute
  LogRoute: typeof LogRoute
  ModulesRoute: typeof ModulesRouteWithChildren
  TriggersRoute: typeof TriggersRouteWithChildren
  IndexRoute: typeof IndexRoute
  SettingsAdvancedRoute: typeof SettingsAdvancedRoute
  SettingsButtonsRoute: typeof SettingsButtonsRoute
  SettingsGeneralRoute: typeof SettingsGeneralRoute
  SettingsProtocolsRoute: typeof SettingsProtocolsRoute
  SettingsSurfacesRoute: typeof SettingsSurfacesRoute
  SurfacesSplatRoute: typeof SurfacesSplatRoute
  SurfacesConfiguredRoute: typeof SurfacesConfiguredRoute
  SurfacesDiscoverRoute: typeof SurfacesDiscoverRoute
  SurfacesOutboundRoute: typeof SurfacesOutboundRoute
  VariablesLabelRoute: typeof VariablesLabelRoute
  VariablesCustomRoute: typeof VariablesCustomRoute
  SettingsIndexRoute: typeof SettingsIndexRoute
  VariablesIndexRoute: typeof VariablesIndexRoute
}

const appRouteChildren: appRouteChildren = {
  SplatRoute: SplatRoute,
  ButtonsRoute: ButtonsRouteWithChildren,
  CloudRoute: CloudRoute,
  ConnectionsRoute: ConnectionsRoute,
  ImportExportRoute: ImportExportRoute,
  LogRoute: LogRoute,
  ModulesRoute: ModulesRouteWithChildren,
  TriggersRoute: TriggersRouteWithChildren,
  IndexRoute: IndexRoute,
  SettingsAdvancedRoute: SettingsAdvancedRoute,
  SettingsButtonsRoute: SettingsButtonsRoute,
  SettingsGeneralRoute: SettingsGeneralRoute,
  SettingsProtocolsRoute: SettingsProtocolsRoute,
  SettingsSurfacesRoute: SettingsSurfacesRoute,
  SurfacesSplatRoute: SurfacesSplatRoute,
  SurfacesConfiguredRoute: SurfacesConfiguredRoute,
  SurfacesDiscoverRoute: SurfacesDiscoverRoute,
  SurfacesOutboundRoute: SurfacesOutboundRoute,
  VariablesLabelRoute: VariablesLabelRoute,
  VariablesCustomRoute: VariablesCustomRoute,
  SettingsIndexRoute: SettingsIndexRoute,
  VariablesIndexRoute: VariablesIndexRoute,
}

const appRouteWithChildren = appRoute._addFileChildren(appRouteChildren)

interface EmulatorRouteChildren {
  EmulatorEmulatorIdlazyRoute: typeof EmulatorEmulatorIdlazyRoute
  EmulatorIndexRoute: typeof EmulatorIndexRoute
}

const EmulatorRouteChildren: EmulatorRouteChildren = {
  EmulatorEmulatorIdlazyRoute: EmulatorEmulatorIdlazyRoute,
  EmulatorIndexRoute: EmulatorIndexRoute,
}

const EmulatorRouteWithChildren = EmulatorRoute._addFileChildren(
  EmulatorRouteChildren,
)

export interface FileRoutesByFullPath {
  '': typeof appRouteWithChildren
  '/emulator': typeof EmulatorRouteWithChildren
  '/emulator.html': typeof RedirectsEmulatorHtmlRoute
  '/emulator2': typeof RedirectsEmulator2Route
  '/emulators': typeof RedirectsEmulatorsRoute
  '/help.html': typeof RedirectsHelpHtmlRoute
  '/ipad.html': typeof RedirectsIpadHtmlRoute
  '/tablet.html': typeof RedirectsTabletHtmlRoute
  '/tablet2.html': typeof RedirectsTablet2HtmlRoute
  '/tablet3': typeof RedirectsTablet3Route
  '/getting-started': typeof GettingStartedlazyRoute
  '/tablet': typeof TabletlazyRoute
  '/$': typeof SplatRoute
  '/buttons': typeof ButtonsRouteWithChildren
  '/cloud': typeof CloudRoute
  '/connections': typeof ConnectionsRoute
  '/import-export': typeof ImportExportRoute
  '/log': typeof LogRoute
  '/modules': typeof ModulesRouteWithChildren
  '/triggers': typeof TriggersRouteWithChildren
  '/connection-debug/$connectionId': typeof ConnectionDebugconnectionIdRoute
  '/emulator/$emulatorId': typeof EmulatorEmulatorIdlazyRoute
  '/': typeof IndexRoute
  '/emulator/': typeof EmulatorIndexRoute
  '/buttons/$page': typeof ButtonsPageRoute
  '/modules/$moduleId': typeof ModulesModuleIdRoute
  '/settings/advanced': typeof SettingsAdvancedRoute
  '/settings/buttons': typeof SettingsButtonsRoute
  '/settings/general': typeof SettingsGeneralRoute
  '/settings/protocols': typeof SettingsProtocolsRoute
  '/settings/surfaces': typeof SettingsSurfacesRoute
  '/surfaces/$': typeof SurfacesSplatRoute
  '/surfaces/configured': typeof SurfacesConfiguredRoute
  '/surfaces/discover': typeof SurfacesDiscoverRoute
  '/surfaces/outbound': typeof SurfacesOutboundRoute
  '/triggers/$controlId': typeof TriggersControlIdRoute
  '/variables/$label': typeof VariablesLabelRoute
  '/variables/custom': typeof VariablesCustomRoute
  '/modules/': typeof ModulesIndexRoute
  '/settings': typeof SettingsIndexRoute
  '/triggers/': typeof TriggersIndexRoute
  '/variables': typeof VariablesIndexRoute
}

export interface FileRoutesByTo {
  '/emulator.html': typeof RedirectsEmulatorHtmlRoute
  '/emulator2': typeof RedirectsEmulator2Route
  '/emulators': typeof RedirectsEmulatorsRoute
  '/help.html': typeof RedirectsHelpHtmlRoute
  '/ipad.html': typeof RedirectsIpadHtmlRoute
  '/tablet.html': typeof RedirectsTabletHtmlRoute
  '/tablet2.html': typeof RedirectsTablet2HtmlRoute
  '/tablet3': typeof RedirectsTablet3Route
  '/getting-started': typeof GettingStartedlazyRoute
  '/tablet': typeof TabletlazyRoute
  '/$': typeof SplatRoute
  '/buttons': typeof ButtonsRouteWithChildren
  '/cloud': typeof CloudRoute
  '/connections': typeof ConnectionsRoute
  '/import-export': typeof ImportExportRoute
  '/log': typeof LogRoute
  '/connection-debug/$connectionId': typeof ConnectionDebugconnectionIdRoute
  '/emulator/$emulatorId': typeof EmulatorEmulatorIdlazyRoute
  '/': typeof IndexRoute
  '/emulator': typeof EmulatorIndexRoute
  '/buttons/$page': typeof ButtonsPageRoute
  '/modules/$moduleId': typeof ModulesModuleIdRoute
  '/settings/advanced': typeof SettingsAdvancedRoute
  '/settings/buttons': typeof SettingsButtonsRoute
  '/settings/general': typeof SettingsGeneralRoute
  '/settings/protocols': typeof SettingsProtocolsRoute
  '/settings/surfaces': typeof SettingsSurfacesRoute
  '/surfaces/$': typeof SurfacesSplatRoute
  '/surfaces/configured': typeof SurfacesConfiguredRoute
  '/surfaces/discover': typeof SurfacesDiscoverRoute
  '/surfaces/outbound': typeof SurfacesOutboundRoute
  '/triggers/$controlId': typeof TriggersControlIdRoute
  '/variables/$label': typeof VariablesLabelRoute
  '/variables/custom': typeof VariablesCustomRoute
  '/modules': typeof ModulesIndexRoute
  '/settings': typeof SettingsIndexRoute
  '/triggers': typeof TriggersIndexRoute
  '/variables': typeof VariablesIndexRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/_app': typeof appRouteWithChildren
  '/emulator': typeof EmulatorRouteWithChildren
  '/emulator.html': typeof RedirectsEmulatorHtmlRoute
  '/emulator2': typeof RedirectsEmulator2Route
  '/emulators': typeof RedirectsEmulatorsRoute
  '/help.html': typeof RedirectsHelpHtmlRoute
  '/ipad.html': typeof RedirectsIpadHtmlRoute
  '/tablet.html': typeof RedirectsTabletHtmlRoute
  '/tablet2.html': typeof RedirectsTablet2HtmlRoute
  '/tablet3': typeof RedirectsTablet3Route
  '/getting-started': typeof GettingStartedlazyRoute
  '/tablet': typeof TabletlazyRoute
  '/_app/$': typeof SplatRoute
  '/_app/buttons': typeof ButtonsRouteWithChildren
  '/_app/cloud': typeof CloudRoute
  '/_app/connections': typeof ConnectionsRoute
  '/_app/import-export': typeof ImportExportRoute
  '/_app/log': typeof LogRoute
  '/_app/modules': typeof ModulesRouteWithChildren
  '/_app/triggers': typeof TriggersRouteWithChildren
  '/connection-debug/$connectionId': typeof ConnectionDebugconnectionIdRoute
  '/emulator/$emulatorId': typeof EmulatorEmulatorIdlazyRoute
  '/_app/': typeof IndexRoute
  '/emulator/': typeof EmulatorIndexRoute
  '/_app/buttons/$page': typeof ButtonsPageRoute
  '/_app/modules/$moduleId': typeof ModulesModuleIdRoute
  '/_app/settings/advanced': typeof SettingsAdvancedRoute
  '/_app/settings/buttons': typeof SettingsButtonsRoute
  '/_app/settings/general': typeof SettingsGeneralRoute
  '/_app/settings/protocols': typeof SettingsProtocolsRoute
  '/_app/settings/surfaces': typeof SettingsSurfacesRoute
  '/_app/surfaces/$': typeof SurfacesSplatRoute
  '/_app/surfaces/configured': typeof SurfacesConfiguredRoute
  '/_app/surfaces/discover': typeof SurfacesDiscoverRoute
  '/_app/surfaces/outbound': typeof SurfacesOutboundRoute
  '/_app/triggers/$controlId': typeof TriggersControlIdRoute
  '/_app/variables/$label': typeof VariablesLabelRoute
  '/_app/variables/custom': typeof VariablesCustomRoute
  '/_app/modules/': typeof ModulesIndexRoute
  '/_app/settings/': typeof SettingsIndexRoute
  '/_app/triggers/': typeof TriggersIndexRoute
  '/_app/variables/': typeof VariablesIndexRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | ''
    | '/emulator'
    | '/emulator.html'
    | '/emulator2'
    | '/emulators'
    | '/help.html'
    | '/ipad.html'
    | '/tablet.html'
    | '/tablet2.html'
    | '/tablet3'
    | '/getting-started'
    | '/tablet'
    | '/$'
    | '/buttons'
    | '/cloud'
    | '/connections'
    | '/import-export'
    | '/log'
    | '/modules'
    | '/triggers'
    | '/connection-debug/$connectionId'
    | '/emulator/$emulatorId'
    | '/'
    | '/emulator/'
    | '/buttons/$page'
    | '/modules/$moduleId'
    | '/settings/advanced'
    | '/settings/buttons'
    | '/settings/general'
    | '/settings/protocols'
    | '/settings/surfaces'
    | '/surfaces/$'
    | '/surfaces/configured'
    | '/surfaces/discover'
    | '/surfaces/outbound'
    | '/triggers/$controlId'
    | '/variables/$label'
    | '/variables/custom'
    | '/modules/'
    | '/settings'
    | '/triggers/'
    | '/variables'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/emulator.html'
    | '/emulator2'
    | '/emulators'
    | '/help.html'
    | '/ipad.html'
    | '/tablet.html'
    | '/tablet2.html'
    | '/tablet3'
    | '/getting-started'
    | '/tablet'
    | '/$'
    | '/buttons'
    | '/cloud'
    | '/connections'
    | '/import-export'
    | '/log'
    | '/connection-debug/$connectionId'
    | '/emulator/$emulatorId'
    | '/'
    | '/emulator'
    | '/buttons/$page'
    | '/modules/$moduleId'
    | '/settings/advanced'
    | '/settings/buttons'
    | '/settings/general'
    | '/settings/protocols'
    | '/settings/surfaces'
    | '/surfaces/$'
    | '/surfaces/configured'
    | '/surfaces/discover'
    | '/surfaces/outbound'
    | '/triggers/$controlId'
    | '/variables/$label'
    | '/variables/custom'
    | '/modules'
    | '/settings'
    | '/triggers'
    | '/variables'
  id:
    | '__root__'
    | '/_app'
    | '/emulator'
    | '/emulator.html'
    | '/emulator2'
    | '/emulators'
    | '/help.html'
    | '/ipad.html'
    | '/tablet.html'
    | '/tablet2.html'
    | '/tablet3'
    | '/getting-started'
    | '/tablet'
    | '/_app/$'
    | '/_app/buttons'
    | '/_app/cloud'
    | '/_app/connections'
    | '/_app/import-export'
    | '/_app/log'
    | '/_app/modules'
    | '/_app/triggers'
    | '/connection-debug/$connectionId'
    | '/emulator/$emulatorId'
    | '/_app/'
    | '/emulator/'
    | '/_app/buttons/$page'
    | '/_app/modules/$moduleId'
    | '/_app/settings/advanced'
    | '/_app/settings/buttons'
    | '/_app/settings/general'
    | '/_app/settings/protocols'
    | '/_app/settings/surfaces'
    | '/_app/surfaces/$'
    | '/_app/surfaces/configured'
    | '/_app/surfaces/discover'
    | '/_app/surfaces/outbound'
    | '/_app/triggers/$controlId'
    | '/_app/variables/$label'
    | '/_app/variables/custom'
    | '/_app/modules/'
    | '/_app/settings/'
    | '/_app/triggers/'
    | '/_app/variables/'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  appRoute: typeof appRouteWithChildren
  EmulatorRoute: typeof EmulatorRouteWithChildren
  RedirectsEmulatorHtmlRoute: typeof RedirectsEmulatorHtmlRoute
  RedirectsEmulator2Route: typeof RedirectsEmulator2Route
  RedirectsEmulatorsRoute: typeof RedirectsEmulatorsRoute
  RedirectsHelpHtmlRoute: typeof RedirectsHelpHtmlRoute
  RedirectsIpadHtmlRoute: typeof RedirectsIpadHtmlRoute
  RedirectsTabletHtmlRoute: typeof RedirectsTabletHtmlRoute
  RedirectsTablet2HtmlRoute: typeof RedirectsTablet2HtmlRoute
  RedirectsTablet3Route: typeof RedirectsTablet3Route
  GettingStartedlazyRoute: typeof GettingStartedlazyRoute
  TabletlazyRoute: typeof TabletlazyRoute
  ConnectionDebugconnectionIdRoute: typeof ConnectionDebugconnectionIdRoute
}

const rootRouteChildren: RootRouteChildren = {
  appRoute: appRouteWithChildren,
  EmulatorRoute: EmulatorRouteWithChildren,
  RedirectsEmulatorHtmlRoute: RedirectsEmulatorHtmlRoute,
  RedirectsEmulator2Route: RedirectsEmulator2Route,
  RedirectsEmulatorsRoute: RedirectsEmulatorsRoute,
  RedirectsHelpHtmlRoute: RedirectsHelpHtmlRoute,
  RedirectsIpadHtmlRoute: RedirectsIpadHtmlRoute,
  RedirectsTabletHtmlRoute: RedirectsTabletHtmlRoute,
  RedirectsTablet2HtmlRoute: RedirectsTablet2HtmlRoute,
  RedirectsTablet3Route: RedirectsTablet3Route,
  GettingStartedlazyRoute: GettingStartedlazyRoute,
  TabletlazyRoute: TabletlazyRoute,
  ConnectionDebugconnectionIdRoute: ConnectionDebugconnectionIdRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/_app",
        "/emulator",
        "/emulator.html",
        "/emulator2",
        "/emulators",
        "/help.html",
        "/ipad.html",
        "/tablet.html",
        "/tablet2.html",
        "/tablet3",
        "/getting-started",
        "/tablet",
        "/connection-debug/$connectionId"
      ]
    },
    "/_app": {
      "filePath": "_app.tsx",
      "children": [
        "/_app/$",
        "/_app/buttons",
        "/_app/cloud",
        "/_app/connections",
        "/_app/import-export",
        "/_app/log",
        "/_app/modules",
        "/_app/triggers",
        "/_app/",
        "/_app/settings/advanced",
        "/_app/settings/buttons",
        "/_app/settings/general",
        "/_app/settings/protocols",
        "/_app/settings/surfaces",
        "/_app/surfaces/$",
        "/_app/surfaces/configured",
        "/_app/surfaces/discover",
        "/_app/surfaces/outbound",
        "/_app/variables/$label",
        "/_app/variables/custom",
        "/_app/settings/",
        "/_app/variables/"
      ]
    },
    "/emulator": {
      "filePath": "self-contained/emulator.tsx",
      "children": [
        "/emulator/$emulatorId",
        "/emulator/"
      ]
    },
    "/emulator.html": {
      "filePath": "-redirects/emulator-html.tsx"
    },
    "/emulator2": {
      "filePath": "-redirects/emulator2.tsx"
    },
    "/emulators": {
      "filePath": "-redirects/emulators.tsx"
    },
    "/help.html": {
      "filePath": "-redirects/help-html.tsx"
    },
    "/ipad.html": {
      "filePath": "-redirects/ipad-html.tsx"
    },
    "/tablet.html": {
      "filePath": "-redirects/tablet-html.tsx"
    },
    "/tablet2.html": {
      "filePath": "-redirects/tablet2-html.tsx"
    },
    "/tablet3": {
      "filePath": "-redirects/tablet3.tsx"
    },
    "/getting-started": {
      "filePath": "self-contained/getting-started.lazy.tsx"
    },
    "/tablet": {
      "filePath": "self-contained/tablet.lazy.tsx"
    },
    "/_app/$": {
      "filePath": "app/$.tsx",
      "parent": "/_app"
    },
    "/_app/buttons": {
      "filePath": "app/buttons.tsx",
      "parent": "/_app",
      "children": [
        "/_app/buttons/$page"
      ]
    },
    "/_app/cloud": {
      "filePath": "app/cloud.tsx",
      "parent": "/_app"
    },
    "/_app/connections": {
      "filePath": "app/connections.tsx",
      "parent": "/_app"
    },
    "/_app/import-export": {
      "filePath": "app/import-export.tsx",
      "parent": "/_app"
    },
    "/_app/log": {
      "filePath": "app/log.tsx",
      "parent": "/_app"
    },
    "/_app/modules": {
      "filePath": "app/modules.tsx",
      "parent": "/_app",
      "children": [
        "/_app/modules/$moduleId",
        "/_app/modules/"
      ]
    },
    "/_app/triggers": {
      "filePath": "app/triggers.tsx",
      "parent": "/_app",
      "children": [
        "/_app/triggers/$controlId",
        "/_app/triggers/"
      ]
    },
    "/connection-debug/$connectionId": {
      "filePath": "self-contained/connection-debug.$connectionId.tsx"
    },
    "/emulator/$emulatorId": {
      "filePath": "self-contained/emulator/$emulatorId.lazy.tsx",
      "parent": "/emulator"
    },
    "/_app/": {
      "filePath": "app/index.tsx",
      "parent": "/_app"
    },
    "/emulator/": {
      "filePath": "self-contained/emulator/index.tsx",
      "parent": "/emulator"
    },
    "/_app/buttons/$page": {
      "filePath": "app/buttons/$page.tsx",
      "parent": "/_app/buttons"
    },
    "/_app/modules/$moduleId": {
      "filePath": "app/modules/$moduleId.tsx",
      "parent": "/_app/modules"
    },
    "/_app/settings/advanced": {
      "filePath": "app/settings/advanced.tsx",
      "parent": "/_app"
    },
    "/_app/settings/buttons": {
      "filePath": "app/settings/buttons.tsx",
      "parent": "/_app"
    },
    "/_app/settings/general": {
      "filePath": "app/settings/general.tsx",
      "parent": "/_app"
    },
    "/_app/settings/protocols": {
      "filePath": "app/settings/protocols.tsx",
      "parent": "/_app"
    },
    "/_app/settings/surfaces": {
      "filePath": "app/settings/surfaces.tsx",
      "parent": "/_app"
    },
    "/_app/surfaces/$": {
      "filePath": "app/surfaces/$.tsx",
      "parent": "/_app"
    },
    "/_app/surfaces/configured": {
      "filePath": "app/surfaces/configured.tsx",
      "parent": "/_app"
    },
    "/_app/surfaces/discover": {
      "filePath": "app/surfaces/discover.tsx",
      "parent": "/_app"
    },
    "/_app/surfaces/outbound": {
      "filePath": "app/surfaces/outbound.tsx",
      "parent": "/_app"
    },
    "/_app/triggers/$controlId": {
      "filePath": "app/triggers/$controlId.tsx",
      "parent": "/_app/triggers"
    },
    "/_app/variables/$label": {
      "filePath": "app/variables/$label.tsx",
      "parent": "/_app"
    },
    "/_app/variables/custom": {
      "filePath": "app/variables/custom.tsx",
      "parent": "/_app"
    },
    "/_app/modules/": {
      "filePath": "app/modules/index.tsx",
      "parent": "/_app/modules"
    },
    "/_app/settings/": {
      "filePath": "app/settings/index.tsx",
      "parent": "/_app"
    },
    "/_app/triggers/": {
      "filePath": "app/triggers/index.tsx",
      "parent": "/_app/triggers"
    },
    "/_app/variables/": {
      "filePath": "app/variables/index.tsx",
      "parent": "/_app"
    }
  }
}
ROUTE_MANIFEST_END */
